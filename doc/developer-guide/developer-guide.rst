.. _Developer_Guide:

#########################################
CCArchiver Developer Guide
#########################################

.. Update these labels and links
.. image:: https://img.shields.io/badge/GitHub-dm_CCArchiver-green.svg
    :target: https://github.com/lsst-ts/dm_CCArchiver
.. image:: https://img.shields.io/badge/Jenkins-dm_CCArchiver-green.svg
    :target: https://tssw-ci.lsst.org/job/LSST_Telescope-and-Site/job/dm_CCArchiver/
.. image:: https://img.shields.io/badge/Jira-dm_CCArchiver-green.svg
    :target: https://jira.lsstcorp.org/issues/?jql=labels+%3D+dm_CCArchiver
.. image:: https://img.shields.io/badge/ts_xml-CCArchiver-green.svg
    :target: https://ts-xml.lsst.io/sal_interfaces/CCArchiver.html


The primary services that the CCArchiver interacts with are the Forwarder 
(dm_Forwarder) and the ComCam Controller.  The Forwarder retrieves and assembles
images. The ComCam Controller presents where files should be deposited and
stages files where the Data Backbone (DBB) and the ComCam Observatory
Operations Data Service (OODS) can act on them.  These services communicate
to each other using RabbitMQ.  A Redis database is also used to advertise
service availablity and service health.


The archiver begins in the STANDBY state. When it receives a START command,
it transitions to the DISABLED state.  This causes the CCArchiver to attempt
to pair with an available Forwarder service through a Redis database. It also
establishes connections to a RabbitMQ server. After the archiver receives an
ENABLE SAL command, it is ready to receive messages.

When the "startIntegration" message is received, the CCArchiver sends a
message to the ComCam Controller, informing it that a new archive image will
arrive soon.  In the controllerâ€™s response is the target directory for where
the image is supposed to be deposited by the forwarder. This target directory
changes over time. The target directory is then sent in a message to the
Forwarder, which sends back an acknowledgment that the message was received.

When the "endReadout" message is received, the CCArchiver sends the message to
the Forwarder, which sends back an acknowledgment that the message was
received.


When the "largeFileObjectAvailable" is received indicating that the header is
available from the HeaderService, the CCArchiver sends the message to the
Forwarder, which sends back an acknowledgment that the message was received.

When the telemetry message "IMAGE_RETRIEVAL_FOR_ARCHIVING" message is received
via RabbitMQ from the ComCam Controller, the CCArchiver translates this into the
"imageRetrievalForArchiving" message and transmits it via SAL.

Note that "IMAGE_RETRIEVAL_FOR_ARCHIVING" indicates that the Forwarder has
contacted the ComCam Controller and told it that it has finished writing
the file.  The ComCam Controller links data to the staging area of the DBB
and the ComCam OODS. Additionally, the Controller sends a message to the
ComCam OODS that it can ingest the file that was written.  The ComCam OODS
ingests the images into the Butler repository and issues a RabbitMQ
message to the ComCam Archiver about the status of the file ingestion.

When the message "CC_FILE_INGEST_REQUEST" is received from the ComCam OODS,
the ComCam Archiver translates that messages and transmits the status of the
Butler file ingestion via SAL as a CCArchiver event.


.. _Dependencies:

Dependencies
============

[This section should list dependencies in bullet form]

* `SAL <https://ts-sal.lsst.io>`_ - v4.0.0
* ts_salobj - v5.2.0

.. Linking to the previous versions may also be worthwhile, depending on the CSC

.. _API:

CCArchiver API
=============================

The content in this section is autogenerated from docstrings.

.. The code below should insert the docstrings from the code.

.. automodapi:: lsst.dm.CCArchiver
    :no-main-docstr:
    :no-inheritance-diagram:


.. _Build:

Build and Test
==============

[This section is to walk a developer through the steps to build and test the software.]


.. _Usage:

Usage
=====

[Description on how to use ths software, scripts, any useful programs etc. Basic operations such as startup/shutdown should be explained, ideally with example code/steps]

.. _Simulator:

Simulator
=========

[Information regarding the simulator, including how to run, restrictions, differences from real operation etc should be described here]


.. _Firmware:

Updating Firmware of the CCArchiver
==================================================

[This section should discuss the firmware currently installed and how to update it when required. Linking to firmware location is expected, along with details on any support equipment to write to FPGAs etc]


.. _Documentation:

Building the Documentation
==========================

[This section is to walk the developer through building the documentation. This should be a step-by-step process as it will most likely be used by non-developers as well who wish to edit the docs]

.. _Contributing:

Contributing
============

Code and documentation contributions utilize pull-requests on github.
Feature requests can be made by filing a Jira ticket with the `CCArchiver` label.
In all cases, reaching out to the :ref:`contacts for this CSC <Contact_Personnel>` is recommended.

